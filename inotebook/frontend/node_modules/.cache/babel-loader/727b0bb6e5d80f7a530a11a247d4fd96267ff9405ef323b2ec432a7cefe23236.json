{"ast":null,"code":"var _jsxFileName = \"/home/kakshi/repos/inotebook/inotebook/frontend/src/context/notes/NotesState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport NoteContext from \"./NotesContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n  const getNotes = async () => {\n    //API call\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"authToken\")\n      }\n    });\n    const json = await response.json();\n    // console.log(json);\n    setNotes(json);\n  };\n\n  // Add a Note\n  const addNote = async notess => {\n    let title, description, tag;\n    title = notess.title;\n    description = notess.description;\n    tag = notess.tag;\n    console.log(\"Adding note \" + notess.title);\n    //TODO: API call\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"authToken\")\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = response.json();\n    // setNotes(notes.concat(note));\n    getNotes();\n  };\n\n  // Delete a note\n  const deleteNote = async id => {\n    console.log(\"Delete note\", id);\n    //TODO: API call\n    const response = await fetch(`${host}/api/notes/delete/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"authToken\")\n      }\n    });\n    const json = response.json();\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n\n  // Edit a note\n  const editNote = async (id, title, description, tag) => {\n    //TODO: API call\n    const response = await fetch(`${host}/api/notes/update/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"authToken\")\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n    let newNote = JSON.parse(JSON.stringify(notes));\n    for (let index = 0; index < newNote.length; index++) {\n      const note = newNote[index];\n      if (note._id === id) {\n        newNote[index].title = title;\n        newNote[index].description = description;\n        newNote[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNote);\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: [props.children, \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","getItem","json","addNote","notess","title","description","tag","console","log","body","JSON","stringify","note","deleteNote","id","newNotes","filter","_id","editNote","newNote","parse","index","length","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/kakshi/repos/inotebook/inotebook/frontend/src/context/notes/NotesState.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport NoteContext from \"./NotesContext\";\n\nconst NoteState = (props) => {\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  const getNotes = async () => {\n    //API call\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\":\n          localStorage.getItem(\"authToken\"),\n      },\n    });\n    const json = await response.json();\n    // console.log(json);\n    setNotes(json);\n  };\n\n  // Add a Note\n  const addNote = async (notess) => {\n    let title, description, tag;\n    title = notess.title;\n    description = notess.description;\n    tag = notess.tag;\n    console.log(\"Adding note \" + notess.title);\n    //TODO: API call\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\":\n          localStorage.getItem(\"authToken\"),\n      },\n      body: JSON.stringify({ title, description, tag }),\n    });\n    const note = response.json();\n    // setNotes(notes.concat(note));\n    getNotes();\n  };\n\n  // Delete a note\n  const deleteNote = async (id) => {\n    console.log(\"Delete note\", id);\n    //TODO: API call\n    const response = await fetch(`${host}/api/notes/delete/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\":\n          localStorage.getItem(\"authToken\"),\n      },\n    });\n    const json = response.json();\n\n    const newNotes = notes.filter((note) => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n\n  // Edit a note\n  const editNote = async (id, title, description, tag) => {\n    //TODO: API call\n    const response = await fetch(`${host}/api/notes/update/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\":\n          localStorage.getItem(\"authToken\"),\n      },\n      body: JSON.stringify({ title, description, tag }),\n    });\n    const json = response.json();\n    let newNote = JSON.parse(JSON.stringify(notes));\n    for (let index = 0; index < newNote.length; index++) {\n      const note = newNote[index];\n      if (note._id === id) {\n        newNote[index].title = title;\n        newNote[index].description = description;\n        newNote[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNote);\n  };\n\n  return (\n    <NoteContext.Provider\n      value={{ notes, addNote, deleteNote, editNote, getNotes }}\n    >\n      {props.children};\n    </NoteContext.Provider>\n  );\n};\n\nexport default NoteState;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}